void Menu()
{
    Console.Clear();
    Console.WriteLine(" ****** SORTEO ******");
    Console.WriteLine("1) Buscar cuenta");
    Console.WriteLine("2) Reporte de boletos");
    Console.WriteLine("3) Salir");
    Console.Write("\r\nSeleccione una opción: ");

    switch (Console.ReadLine())
    {
        case "1":
            BuscarCuenta();
            break;
        case "2":
            Reporte();
            break;
        case "3":
            break;
        default:
            break;
    }
}


void BuscarCuenta()
{
    Console.WriteLine("Ingrese el número de cuenta");
    var cuenta = Console.ReadLine();
    var resultado = queries.BuscarCuenta(cuenta);

    if (resultado is null)
    {
        Console.WriteLine("La cuenta no existe");
        BuscarCuenta();
    }

    Console.WriteLine("--------- Detalle de cuenta ---------");
    Console.WriteLine($"Número cuenta: {resultado.NumeroCuenta}");
    Console.WriteLine($"Nombre: {resultado.Nombre}");
    Console.WriteLine($"Saldo: {resultado.Saldo}");
    Console.WriteLine($"Fecha Apertura: {resultado.FechaApertura.ToString("dd-MM-yyyy")}");
    Console.WriteLine($"Fecha Vencimiento: {resultado.FechaVencimiento.ToString("dd-MM-yyyy")}");
    Console.WriteLine($"Tipo de cuenta: {resultado.TipoCuenta.Nombre}");
    Console.WriteLine($"Estado: {resultado.Estado}");
    Console.WriteLine("------------------------------------");

    // Validaciones
    var tipo = resultado.TipoCuenta.Nombre;

    if (resultado.Estado == false)
    {
        Console.WriteLine("La cuenta no está vigente");
        Console.ReadLine();
        Menu();
    }


    if (resultado.FechaApertura.AddYears(1) > resultado.FechaVencimiento && tipo == "P")
    {
        Console.WriteLine("El plazo no es más de 365 días");
        Console.ReadLine();
        Menu();
    }


    var ultimoBoleto = queries.UltimoNumeroBoleto();
    var numeroBoletos = 0;

    if (tipo == "C")
    {
        var boletosAsignados = 0;
        var disponible = queries.BoletosDisponiblesCuenta(resultado.NumeroCuenta);
        if (disponible == null)
        {
            boletosAsignados = (int)(1);
        }
        Console.WriteLine($"Boletos asignados: 1");
        Console.WriteLine($"Boletos entregados: {queries.BoletosEntregadosCuenta(resultado.NumeroCuenta)}");
        Console.WriteLine($"Boletos disponibles: {boletosAsignados}");
        if (boletosAsignados != 0)
        {
            var boletosEntregar = 0;
            do
            {
                Console.WriteLine("Ingrese el número de boletos a entregar:");
                boletosEntregar = Convert.ToInt32(Console.ReadLine());

            } while (boletosEntregar <= 0 || boletosEntregar > boletosAsignados);

            numeroBoletos = ultimoBoleto + boletosEntregar;

            var boletosDisponibles = boletosAsignados - boletosEntregar;
            queries.AgregarBoletos(resultado, boletosAsignados, boletosEntregar, boletosDisponibles, numeroBoletos);
            Console.WriteLine($"Se asignaron los boletos desde: {ultimoBoleto} - {numeroBoletos}");

        }

    }

    if (tipo == "P")
    {
        var totalBoletosAsignados = (int)(resultado.Saldo / 100);
        var boletosAsignados = 0;
        var disponible = queries.BoletosDisponiblesCuenta(resultado.NumeroCuenta);
        if (disponible == null)
        {
            boletosAsignados = totalBoletosAsignados;
        }
        else
        {
            boletosAsignados = (int)(disponible.BoletosDisponibles);
        }
        Console.WriteLine($"Boletos asignados: {totalBoletosAsignados}");
        Console.WriteLine($"Boletos entregados: {queries.BoletosEntregadosCuenta(resultado.NumeroCuenta)}");
        Console.WriteLine($"Boletos disponibles: {boletosAsignados}");
        if (boletosAsignados != 0)
        {
            var boletosEntregar = 0;
            do
            {
                Console.WriteLine("Ingrese el número de boletos a entregar:");
                boletosEntregar = Convert.ToInt32(Console.ReadLine());
            } while (boletosEntregar <= 0 || boletosEntregar > boletosAsignados);

            numeroBoletos = ultimoBoleto + boletosEntregar;
            var boletosDisponibles = boletosAsignados - boletosEntregar;

            queries.AgregarBoletos(resultado, totalBoletosAsignados, boletosEntregar, boletosDisponibles, numeroBoletos);
            Console.WriteLine($"Se asignaron los boletos desde: {ultimoBoleto} - {numeroBoletos}");
        }

    }
    Console.ReadLine();
    Menu();
}

void Reporte()
{
    IEnumerable<Reporte> Reporte = queries.ReporteLista();
    Console.WriteLine("{0,-10} {1,-10} {2,-40} {3,-15} {4,-15} {5,-15}\n", "Secuen.", "Cuenta", "Cliente", "Boletos Asig.", "Boletos Ent.", "Boletos Dis.");
    foreach (var item in Reporte)
    {
        Console.WriteLine("{0,-10} {1,-10} {2,-40} {3,-15} {4,-15} {5,-15}", item.Secuencial, item.NumeroCuenta, item.Nombre, item.BoletosAsignados, item.BoletosEntregados, item.BoletosDisponibles);
    }
    Console.ReadLine();
    Menu();
}

public class LinqQueries
{
    private List<Cuenta> cuentas = new List<Cuenta>();
    private List<Reporte> reporte = new List<Reporte>();


    public LinqQueries()
    {
        this.cuentas.Add(new Cuenta(1, "10921015", "AMAGUAYA ALLAUCA  BYRON FERNANDO", 7283.04, new DateTime(2020, 12, 26), new DateTime(2023, 6, 5), true, new TipoCuenta { Nombre = "C" }));
        this.cuentas.Add(new Cuenta(2, "51562002", "BASANTES VILLA HOLGER ROBERTO", 3450, new DateTime(2023, 3, 3), new DateTime(2024, 3, 3), false, new TipoCuenta { Nombre = "P" }));
        this.cuentas.Add(new Cuenta(3, "50962029", "CARDENAS LATORRE SEBASTIAN ALEJANDRO", 6700, new DateTime(2023, 3, 20), new DateTime(2024, 3, 20), true, new TipoCuenta { Nombre = "P" }));
        this.cuentas.Add(new Cuenta(4, "10121061", "CARRERA PACA JEFERSON FERNANDO", 9055.6, new DateTime(2021, 3, 9), new DateTime(2023, 6, 5), true, new TipoCuenta { Nombre = "C" }));
        this.cuentas.Add(new Cuenta(5, "10821022", "CASTILLO CARRASCO  MARIA ELENA", 5783.4, new DateTime(2019, 8, 13), new DateTime(2023, 4, 28), true, new TipoCuenta { Nombre = "C" }));
        this.cuentas.Add(new Cuenta(6, "50962020", "CHILIQUINGA MACAS JONATHAN SAUL", 2400, new DateTime(2023, 7, 6), new DateTime(2024, 7, 1), true, new TipoCuenta { Nombre = "P" }));
        this.cuentas.Add(new Cuenta(7, "50362038", "CONGACHA MICHAEL/REP. REMACHE PAOLA LEONOR", 1000, new DateTime(2023, 5, 18), new DateTime(2023, 11, 18), true, new TipoCuenta { Nombre = "P" }));
        this.cuentas.Add(new Cuenta(8, "10121057", "ESTRELLA ARIAS JACINTO EDMUNDO", 4604.82, new DateTime(2019, 11, 8), new DateTime(2023, 6, 6), false, new TipoCuenta { Nombre = "P" }));
        this.cuentas.Add(new Cuenta(9, "50862068", "GUAMAN VAZCONES HERNAN PATRICIO", 3000, new DateTime(2023, 5, 10), new DateTime(2024, 5, 10), true, new TipoCuenta { Nombre = "P" }));
        this.cuentas.Add(new Cuenta(10, "40711018", "GUAPISACA QUITO  JULIA MARLENE", 205.56, new DateTime(2019, 7, 30), new DateTime(2024, 5, 10), true, new TipoCuenta { Nombre = "P" }));
    }

    public Cuenta BuscarCuenta(string cuenta)
    {
        return cuentas.Find(c => c.NumeroCuenta == cuenta);
    }

    public void AgregarBoletos(Cuenta cuenta, int bAsignados, int bEntregados, int bDisponibles, int UltimoNumero)
    {
        this.reporte.Add(new Reporte(cuenta.Secuencial, cuenta.NumeroCuenta, cuenta.Nombre, bAsignados, bEntregados, bDisponibles, UltimoNumero));
    }

    public int UltimoNumeroBoleto()
    {
        if (this.reporte.Count == 0)
            return 1000;
        else
        {
            var r = reporte.Last();
            return r.UltimoNumero;
        }
    }

    public int BoletosEntregadosCuenta(string cuenta)
    {
        return this.reporte.Where(r => r.NumeroCuenta == cuenta).Sum(r => r.BoletosEntregados);
    }

    public Reporte BoletosDisponiblesCuenta(string cuenta)
    {
        return this.reporte.FindLast(r => r.NumeroCuenta == cuenta);
    }

    public IEnumerable<Reporte> ReporteLista()
    {
        return this.reporte;
    }

}
